


//******************************* SharePoint Search API Display Template Custom Multi Select Refiners ****************************************//

<body>
<!--    <script>

        $includeLanguageScript(this.url, "~sitecollection/_catalogs/masterpage/Display Templates/Content Web Parts/AWS/dropdownmultiselect.js");
    </script>
    -->
    
<script>
$includeCSS(this.url, "~sitecollection/_catalogs/masterpage/Display Templates/Content Web Parts/AWS/dropdownmultiselect.css");
RegisterSod('jquery-2.2.4.min.js', '//code.jquery.com/jquery-2.2.4.min.js');
$includeLanguageScript(this.url, "~sitecollection/_catalogs/masterpage/Display Templates/Content Web Parts/AWS/dropdownmultiselect.js");

</script>

    <div id="CustomRefinement" class="CustomMultiRefinment">
<!--#_

  // Needed objects
  var listData = ctx.ListData;
  var hasControl = true;

  // Create a new hidden block outside the current refinement control
  var refElm = document.getElementById('Refinement');
  var hiddenBlockID = ctx.RefinementControl.containerId + "_" + ctx.RefinementControl.propertyName;
  var hiddenBlock = document.getElementById(hiddenBlockID);
  // Check if the hidden block exists, otherwise we create one
  if (hiddenBlock === null || hiddenBlock.lenght <= 0) {
    hiddenBlock = document.createElement('div');
    refElm.appendChild(hiddenBlock);
    hiddenBlock.setAttribute('id', hiddenBlockID);
    hiddenBlock.setAttribute('style', 'display:none;');
  }

  // Dropdown Group IDs
  var unselDD = ctx.RefinementControl.containerId + "_Unsel";
  var selDD = ctx.RefinementControl.containerId + "_Sel";

  var currentRefinementCategory = ctx.ClientControl.getCurrentRefinementCategory(ctx.RefinementControl.propertyName);
  // Check if the object is null or undefined && Count the tokens currently in place
  var hasAnyFiltertokens = (!Srch.U.n(currentRefinementCategory) && currentRefinementCategory.get_tokenCount() > 0);
  
  // Check if the current Refinement Control can be exists
  if ($isNull(ctx.RefinementControl) || $isNull(ctx.ClientControl)) hasControl = false;

  if (hasControl) {
    if(!$isNull(listData) && !$isEmptyArray(listData)) {
        // Show the refinement title
        var isExpanded = Srch.Refinement.getExpanded(ctx.RefinementControl.propertyName);
        var iconClass = (isExpanded == "true"? "ms-ref-uparrow" : "ms-ref-downarrow");
        var refinerCatTitle = Srch.Refinement.getRefinementTitle(ctx.RefinementControl);
        // Display style > needed to hide the refinement list when collapsed
        var displayStyle = (isExpanded == "true"? "" : "none");
_#-->
        <div id='Container' class="row col-md-2 refiners multirefiners">
            _#= Srch.U.collapsibleRefinerTitle(ctx.RefinementControl.propertyName, ctx.ClientControl.get_id(), refinerCatTitle, iconClass) =#_

<!--#_
        // (un)selected filter arrays
        var unselectedFilters = new Array();
        var selectedFilters = new Array();

        // Fill the arrays with refinement values
        for (var i = 0; i < listData.length; i++){
            var filter = listData[i];
            if(!$isNull(filter)) {
                filter.RefinementTokens = [listData[i].RefinementToken];
                filter.RefinementTokenWrappedValues = [Srch.RefinementUtil.stringValueToEqualsToken(listData[i].RefinementValue)];

                if (ctx.ClientControl.hasAllRefinementFilters(filter.RefinerName, filter.RefinementTokens) ||
                    ctx.ClientControl.hasAllRefinementFilters(filter.RefinerName, filter.RefinementTokenWrappedValues)) {
                    selectedFilters.push(filter);
                } else {
                    unselectedFilters.push(filter);
                }
            }
        }
_#-->
        <select class='col-md-2 ms-ref-unselSec form-control selectpicker selectmultipicker' style='display:_#= $htmlEncode(displayStyle) =#_' onchange="javascript:new Function(this.value)();">
            <option class="refineroption"></option>
<!--#_

       
 if (selectedFilters.length > 0 || hasAnyFiltertokens) {
_#-->
            <optgroup label="Selected Refiners" id="_#= selDD =#_">
<!--#_
            for (var i = 0; i < selectedFilters.length; i++) {
                var filter = selectedFilters[i];
                if(!$isNull(filter)) {
                    var refiners = new Object();
                    refiners[filter.RefinerName] = filter.RefinementTokens;
                    ShowRefiner(filter.RefinementName, filter.RefinementCount, refiners, 'removeRefinementFiltersJSON', true);
                }
            }
_#-->
            </optgroup>
<!--#_
        }
_#-->
            <optgroup label="Other Refinements" id="_#= unselDD =#_">
<!--#_
            if (unselectedFilters.length > 0) {
                // Clear the hidden list
                ClearHiddenList();
                for (var i = 0; i < unselectedFilters.length; i++) {
                    var filter = unselectedFilters[i];
                    if(!$isNull(filter)) {
                        var refiners = new Object();
                        refiners[filter.RefinerName] = filter.RefinementTokens;
                        ShowRefiner(filter.RefinementName, filter.RefinementCount, refiners, 'updateRefinersJSON', false);
                    }
                }
            }
_#--> 
            </optgroup>
        </select>
        <div id="RemoveRefinement" class="RemoveMultiRefinment">
<!--#_
        if (selectedFilters.length > 0 || hasAnyFiltertokens) {
            var refinerRemoval = new Object();
            refinerRemoval[ctx.RefinementControl.propertyName] = null;
            ShowRefiner('Reset Filter', null, refinerRemoval, 'updateRefinersJSON', false);
        }
_#-->
        </div>
      </div>
<!--#_
    }
  }
   
    function ValueChanged(value) {}

    function ShowRefiner(refinementName, refinementCount, refiners, method, selected) {
        // Create the onClick or onChange event
        var onChangeOrClick = "$getClientControl(document.getElementById('"+ctx.RefinementControl.containerId+"'))." + method + "('" + $scriptEncode(Sys.Serialization.JavaScriptSerializer.serialize(refiners)) + "');";
        
        // Check if there aren't filter tokens in place
        if (!hasAnyFiltertokens) {
            var elm = document.getElementById(hiddenBlockID);
            var option = document.createElement('option');
            var text = document.createTextNode(refinementName);
            option.appendChild(text);
            option.setAttribute('value', onChangeOrClick);
            elm.appendChild(option);
        }

        // Check if the refinement contains results && if the current item is selected
        if (refinementCount != null && selected !== true) {
_#-->


<!-- hiddenBlockID, onChangeOrClick, refinementName, refinementCount, refiners, method, selected -->
 <!--            <option class="refineroption1" value='_#= onChangeOrClick =#_'>_#= $htmlEncode(refinementName + " > count(" + refinementCount + ") > container id: " + ctx.RefinementControl.containerId  + " > Parent refiner: " + filter.RefinerName + " > GUID " + filter.RefinementTokens+ " > selected? " + selected + " > OnChange " + onChangeOrClick) =#_</option> 
           <option class="refineroption1" value='_#= onChangeOrClick =#_'><span class="selectval">_#= $htmlEncode(refinementName + " > count(" + refinementCount + ") > Parent refiner: " + filter.RefinerName + " > GUID " + filter.RefinementTokens+ " > selected? " + selected + " > Obj " + JSON.stringify(filter)) =#_</span><span class="selectvalcheck">&#10004;</span></option>-->

           <option class="refineroption1"  id="_#= $htmlEncode(ctx.RefinementControl.containerId) =#_" value='_#= onChangeOrClick =#_'><span class="selectval" style="height: 100px;">_#= $htmlEncode(refinementName + " Obj " + JSON.stringify()) =#_</span></option>
<!--#_
        } else if (refinementCount != null && selected === true) {
_#-->


           <option  class="refineroption2" value='_#= onChangeOrClick =#_' selected='selected'>_#= $htmlEncode(refinementName + " > count(" + refinementCount + ") > container id: " + ctx.RefinementControl.containerId  + " > Parent refiner: " + filter.RefinerName + " > GUID " + filter.RefinementTokens+ " > selected? " + selected + " > OnChange " + onChangeOrClick) =#_</option> 
           
       <!--   <option class="refineroption1"  id="_#= $htmlEncode(ctx.RefinementControl.containerId) =#_" value='_#= onChangeOrClick =#_'><span class="selectval">_#= $htmlEncode(refinementName + " > count(" + refinementCount + ")" ) =#_</span><span class="selectvalcheck"><input  type="checkbox" class="ms-padding0 ms-margin0 ms-verticalAlignMiddle" /></span></option> -->

<!--#_
        } else {
_#-->
            <div><a href='javascript:{}' onclick='_#= onChangeOrClick =#_'>_#= $htmlEncode(refinementName) =#_</a></div>
<!--#_
        }
    }

   
 function ClearHiddenList() {
        var elm = document.getElementById(hiddenBlockID);
        while (elm.hasChildNodes()) {
            elm.removeChild(elm.lastChild);
        }
    }

    function GetAllElementsWithAttribute(element, attribute, value) {
        var matchingElements = [];
        var allElements = element.getElementsByTagName('*');
        for (var i = 0; i < allElements.length; i++) {
            if (allElements[i].getAttribute(attribute)) {
                if (value === allElements[i].getAttribute(attribute)) {
                    matchingElements.push(allElements[i]);
                }
            }
        }
        return matchingElements;
    }

    // Run this after the control is rendered - this will populate the unselected option group
    AddPostRenderCallback(ctx, function() {
    
      $includeScript(this.url, "~sitecollection/_catalogs/masterpage/Display Templates/Content Web Parts/AWS/dropdownmultiselect.js");
     
        if (hasAnyFiltertokens) {
            // Get the hidden block
            var hiddenOptions = document.getElementById(hiddenBlockID).children;
            var unSelGroup = document.getElementById(unselDD);
            var selGroup = document.getElementById(selDD);
            // Clone all the elements from the hidden list to the unselected option group
            for (var i = 0; i < hiddenOptions.length; i++) {
                var selectedElm = GetAllElementsWithAttribute(selGroup, 'value', hiddenOptions[i].getAttribute('value').replace('updateRefinersJSON', 'removeRefinementFiltersJSON'));
                if (selectedElm === null || selectedElm.length <= 0) {
                    var cloneElm = hiddenOptions[i].cloneNode(true);
                    unSelGroup.appendChild(cloneElm);
                }
            }
        }
    });
_#-->
    </div>




//******************************************* SharePoint REST API Term Store Call with Tree Pattern JavaScript ******************************************//

    /**
	 * Returns an array object of terms as a tree
	 *
	 * @param {string} id - Termset ID
	 * @param {object} callback - Callback function to call upon completion and pass termset into
	 */
    module.getTermSetAsTree = function (id, callback) {
        module.getTermSet(id, function (terms) {
            var termsEnumerator = terms.getEnumerator(),
				tree = {
				    term: terms,
				    children: [],
				    show: true
				};

            // Loop through each term
            while (termsEnumerator.moveNext()) {
                var currentTerm = termsEnumerator.get_current();
                var currentTermPath = currentTerm.get_pathOfTerm().split(';');
                var children = tree.children;

                // Loop through each part of the path
                for (var i = 0; i < currentTermPath.length; i++) {
                    var foundNode = false;

                    // Find out if the current term exists by checking the children terms
                    for (var j = 0; j < children.length; j++) {
                        if (children[j].name === currentTermPath[i]) {
                            foundNode = true;
                            break;
                        }
                    }

                    // Select the node, otherwise create a new one
                    var term = foundNode ? children[j] : { name: currentTermPath[i], children: [] };

                    // If we're a child element, add the term properties
                    if (i === currentTermPath.length - 1) {
                        term.term = currentTerm;
                        term.title = currentTerm.get_name();
                        term.show = currentTerm.get_objectData().get_properties()["CustomProperties"]["show"] != undefined ? currentTerm.get_objectData().get_properties()["CustomProperties"]["show"] : true;
                        term.guid = currentTerm.get_id().toString();
                    }

                    // If the node did exist, let's look there next iteration
                    if (foundNode) {
                        children = term.children;
                    }
                        // If the segment of path does not exist, create it
                    else {
                        children.push(term);

                        // Reset the children pointer to add there next iteration
                        if (i !== currentTermPath.length - 1) {
                            children = term.children;
                        }
                    }
                }
            }

            // Sort the terms using their custom term properties
            tree = module.sortTermsFromTree(tree);

            callback(tree);
        });
    };





//******************************* JavaScript Function Check the custom dropdown items when OOB select changed **************************//
    that.check = function () {
        var domData = { children: getTermsStoresFromDom() };
        console.log(domData);
        $(".dsDropdownParent").each(function (i, e) {
            var _n = $.trim($(e).find(".dsDropdownLabel").text());
            var _domItem = that.item(_n, domData);
            $(e).find("ul > li").each(function (_i, _e) {
                if (that.exists($.trim($(_e).attr("title")), _domItem)) {
                    $(_e).removeAttr("style");
                }
                else {
                    if ($(_e).find("> a").hasClass("selected")) {
                        $(_e).find("> a").removeClass("selected");
                    }
                    $(_e).hide();
                }
            });
            that.values($(e).find(".dsDropdown"));
            var _a = true;
            $(e).find(".dsDropdown > ul > li").each(function (_i, _e) {
                if ($(_e).css("display").toUpperCase() != "NONE") {
                    _a = false;
                    return false;
                }
            });
            if (_a) {
                $(e).hide();
            }
            else {
                $(e).removeAttr("style");
            }
        });
    };

   that.html = function (data, domItem) {
        var _h = '<ul>';
        $.each(data.children, function (m, n) {
            if (that.exists(n.name, domItem)) {
                _h += '<li title="' + n.name + '" >';
                _h += '<a href="javascript:" data-id="' + n.guid + '" data-name="' + n.name + '"><i></i>' + n.name + '</a>';
                if (n.children && n.children.length > 0) {
                    _h += that.html(n, domItem);
                }
                _h += '</li>';
            }
        });
        return _h + '</ul>';
    };
    /// Get filter item
    that.item = function (name, data) {
        var r = [];
        $.each(data.children, function (i, d) {
            if (that.isEquals(d.name, name)) {
                r = d;
                return r;
            }
        });
        return r;
    };
    /// Determine if they are the same or not
    that.isEquals = function (str1, str2) {
        return $.trim(str1).toUpperCase() == $.trim(str2).toUpperCase();
    };
    /// Check if the item name exists
    that.exists = function (name, data) {
        var r = false;
        $.each(data.children, function (i, d) {
            if (that.isEquals(d.name, name)) {
                r = true;
                return false;
            }
        });
        return r;
    };

